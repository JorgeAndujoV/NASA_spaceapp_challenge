import streamlit as st
import folium
from streamlit_folium import st_folium
import random
import datetime
import base64
# =============================================================================
# 1. CONFIGURACI√ìN DE LA P√ÅGINA
# =============================================================================
st.set_page_config(
    page_title="Predictor de H√°bitat de Tiburones",
    page_icon="ü¶à",
    layout="wide",
)

# =============================================================================
# 2. SIMULACI√ìN DEL MODELO DE PREDICCI√ìN (MOCK MODEL)
# =============================================================================
def mock_model_predict(lat: float, lon: float, month: int, year: int) -> float:
    """
    Simula la predicci√≥n de un modelo de ML.
    Toma coordenadas y fecha y devuelve una probabilidad entre 0.0 y 1.0.
    Usamos la entrada como 'seed' para que el resultado sea aleatorio pero consistente.
    """
    # La semilla asegura que para la misma lat/lon/fecha, siempre obtengas el mismo n√∫mero "aleatorio"
    seed = f"{lat}{lon}{month}{year}"
    random.seed(seed)
    # Genera la probabilidad
    probability = random.uniform(0.0, 1.0)
    return probability

# =============================================================================
# 3. FUNCIONES AUXILIARES
# =============================================================================
def get_probability_details(probability: float) -> tuple:
    """
    Categoriza la probabilidad en niveles y asigna un color y emoji.
    """
    if probability < 0.33:
        level = "Baja"
        color = "green"
        emoji = "üü¢"
    elif probability < 0.66:
        level = "Media"
        color = "orange"
        emoji = "üü†"
    else:
        level = "Alta"
        color = "red"
        emoji = "üî¥"
    return level, color, emoji

# =============================================================================
# 4. INICIALIZACI√ìN DEL ESTADO DE LA APLICACI√ìN
# =============================================================================
if "last_clicked" not in st.session_state:
    st.session_state["last_clicked"] = None

# --- FUNCI√ìN AUXILIAR PARA VIDEOS CON AUTOPLAY Y LOOP ---
# La he movido aqu√≠ para que est√© disponible para la pesta√±a 2
def autoplay_video(video_url: str):
    # Simplemente genera el HTML con la URL del video
    md = f"""
    <video controls loop autoplay="true" muted="true" style="width:100%;">
        <source src="{video_url}" type="video/webm">
    </video>
    """
    st.markdown(md, unsafe_allow_html=True)

# =============================================================================
# 5. CONSTRUCCI√ìN DE LA INTERFAZ GR√ÅFICA (UI)
# =============================================================================

# --- T√çTULO ---
st.title("¬øD√≥nde est√°n los tiburones? ü¶à")
st.markdown("Una herramienta para predecir h√°bitats de forrajeo de tiburones utilizando datos satelitales de la NASA.")

# --- ESTRUCTURA DE PESTA√ëAS PARA ORGANIZAR EL CONTENIDO ---
tab1, tab2, tab3 = st.tabs(["üåé Herramienta predictiva", "üî¨ La ciencia detr√°s del modelo", "üß† Nuestro trabajo"])

# --- PESTA√ëA 1: HERRAMIENTA PREDICTIVA (Tu c√≥digo original - NO HA CAMBIADO) ---
with tab1:
    # --- LAYOUT DE DOS COLUMNAS ---
    map_col, results_col = st.columns([3, 2]) # El mapa ocupa m√°s espacio

    # --- COLUMNA 2: CONTROLES Y RESULTADOS ---
    with results_col:
        st.header("Panel de an√°lisis")
        st.date_input(
            "Selecciona mes y a√±o:",
            value=datetime.date(2025, 10, 5),
            min_value=datetime.date(2020, 1, 1),
            max_value=datetime.date(2030, 12, 31),
            key='date_input'
        )
        st.markdown("---")
        # Creamos un espacio vac√≠o que llenaremos despu√©s con los resultados
        results_placeholder = st.empty()

    # --- COLUMNA 1: MAPA INTERACTIVO ---
    with map_col:
        # 1. Decidir la vista inicial del mapa
        if st.session_state["last_clicked"]:
            # Si ya hay un punto guardado, centramos el mapa ah√≠
            lat = st.session_state["last_clicked"]["lat"]
            lon = st.session_state["last_clicked"]["lng"]
            location = [lat, lon]
            zoom = 6 # Acercamos la vista
        else:
            # Vista inicial por defecto
            location = [20, 0]
            zoom = 2.5

        # 2. Crear el objeto de mapa
        m = folium.Map(location=location, zoom_start=zoom)

        # 3. ***** LA PARTE CLAVE CORREGIDA *****
        # Si ya tenemos un punto guardado, calculamos su probabilidad Y DIBUJAMOS EL MARCADOR
        if st.session_state["last_clicked"]:
            lat = st.session_state["last_clicked"]["lat"]
            lon = st.session_state["last_clicked"]["lng"]
            date = st.session_state.date_input
            
            # Calcular probabilidad y detalles para el marcador
            probability = mock_model_predict(lat, lon, date.month, date.year)
            level, color, emoji = get_probability_details(probability)

            # Crear el texto del popup
            popup_text = f"""
            <b>Ubicaci√≥n Analizada</b><br>
            Lat: {lat:.2f}, Lon: {lon:.2f}<br>
            Probabilidad: <b>{probability:.0%} ({level})</b>
            """
            
            # A√ëADIR EL MARCADOR AL MAPA 'm' ANTES DE MOSTRARLO
            folium.Marker(
                location=[lat, lon],
                popup=folium.Popup(popup_text, max_width=300),
                icon=folium.Icon(color=color, icon="life-ring", prefix='fa')
            ).add_to(m)

        # 4. Renderizar el mapa y esperar un nuevo clic
        map_data = st_folium(m, height=600, width="100%", returned_objects=["last_clicked"])

        # 5. Si hay un nuevo clic, actualizar el estado y forzar la recarga
        if map_data and map_data["last_clicked"]:
            st.session_state["last_clicked"] = map_data["last_clicked"]
            st.rerun()

    # --- L√ìGICA DE RESULTADOS (esto se mantiene igual) ---
    # Llenamos el panel de la derecha con la informaci√≥n del estado actual
    if st.session_state["last_clicked"]:
        lat = st.session_state["last_clicked"]["lat"]
        lon = st.session_state["last_clicked"]["lng"]
        date = st.session_state.date_input
        
        probability = mock_model_predict(lat, lon, date.month, date.year)
        level, color, emoji = get_probability_details(probability)
        
        with results_placeholder.container():
            st.subheader(f"Resultado para el punto seleccionado:")
            st.metric(label=f"{emoji} Nivel de probabilidad", value=level)
            st.metric(label="Valor de probabilidad", value=f"{probability:.2%}")
            st.progress(probability)
            
            with st.expander("Detalles de la entrada"):
                st.write(f"**Latitud:** {lat:.4f}")
                st.write(f"**Longitud:** {lon:.4f}")
                st.write(f"**Fecha:** {date.strftime('%B %Y')}")
    else:
        with results_placeholder.container():
            st.info("‚ÑπÔ∏è Haz clic en un punto del mapa para iniciar el an√°lisis.")

# --- PESTA√ëA 2: SECCI√ìN DID√ÅCTICA (AHORA CON AUTOPLAY Y TU TEXTO ACTUALIZADO) ---
with tab2:
    st.header("Plancton y corrientes")
    st.write("Nuestro modelo funciona como un detective que busca dos pistas clave en el oc√©ano para encontrar los lugares preferidos de los tiburones. Estas pistas, invisibles al ojo humano, son capturadas por los sat√©lites de la NASA.")
    
    # --- Layout de dos columnas para los videos ---
    video_col1, video_col2 = st.columns(2)

    with video_col1:
        st.subheader("El Plancton, base de la cadena alimenticia")
        try:
            # USANDO LA FUNCI√ìN AUTOPLAY_VIDEO
            autoplay_video('https://raw.githubusercontent.com/JorgeAndujoV/NASA_spaceapp_challenge/main/plancton.webm') 
            st.caption("Cr√©dito: MIT Darwin Project, ECCO2, MITgcm")
        except FileNotFoundError:
            st.error("No se encontr√≥ el archivo 'plancton.webm'. Aseg√∫rate de que est√© en la misma carpeta que tu script.")
            
        st.markdown(
            """
            El **fitoplancton** son algas microsc√≥picas que forman la base de toda la cadena alimenticia en el oc√©ano. 
            - **¬øPor qu√© es relevante?** Donde hay grandes concentraciones de plancton, hay peque√±os peces y crust√°ceos aliment√°ndose. Esto atrae a peces m√°s grandes, que a su vez, son el alimento principal de los tiburones.
            **Nuestra herramienta** utiliza las im√°genes satelitales de clorofila para identificar estas √°reas ricas en plancton, ayud√°ndonos a predecir d√≥nde es m√°s probable que los tiburones encuentren comida.
            """
        )

    with video_col2:
        st.subheader("Las corrientes, autopistas del oc√©ano")
        try:
            # USANDO LA FUNCI√ìN AUTOPLAY_VIDEO
            autoplay_video('https://raw.githubusercontent.com/JorgeAndujoV/NASA_spaceapp_challenge/main/currents.webm') 
            st.caption("Cr√©dito: NASA/Goddard Space Flight Center Scientific Visualization Studio")
        except FileNotFoundError:
            st.error("No se encontr√≥ el archivo 'currents.webm'. Aseg√∫rate de que est√© en la misma carpeta que tu script.")
            
        st.markdown(
            """
            Las **corrientes oce√°nicas** act√∫an como r√≠os y autopistas que transportan nutrientes y agrupan a las presas.
            - **¬øPor qu√© es relevante?** Los tiburones son depredadores inteligentes. No gastan energ√≠a buscando al azar; utilizan las corrientes para viajar y patrullar zonas donde los remolinos y frentes oce√°nicos concentran a sus presas, como si fueran embudos.
            **Nuestra herramienta** emplea datos im√°genes satelitales de la NASA para identificar estas rutas y puntos calientes, ayud√°ndonos a predecir d√≥nde es m√°s probable que los tiburones patrullen en busca de alimento.
            """
        )
    
    st.markdown("---")
    
    st.header("¬øPor qu√© es importante encontrar a los tiburones?")
    st.write(
        """
        Encontrar a los tiburones no es solo para satisfacer nuestra curiosidad. Los tiburones son **depredadores tope** y, como tales, son **bioindicadores cruciales de la salud del oc√©ano**.
        """
    )
    
    st.subheader("Indicadores de ecosistemas saludables")
    st.markdown(
        """
        Una poblaci√≥n saludable de tiburones en una zona indica que toda la cadena alimenticia debajo de ellos es robusta y est√° en equilibrio. Si los tiburones desaparecen de un √°rea, puede ser una se√±al de alerta temprana de problemas m√°s graves como la sobrepesca, la contaminaci√≥n o los efectos del cambio clim√°tico en los niveles m√°s bajos del ecosistema.
        """
    )
    
    st.subheader("¬øQu√© problema estamos resolviendo?")
    st.markdown(
        """
        - **Conservaci√≥n eficiente:** Al predecir sus h√°bitats de alimentaci√≥n, podemos ayudar a dise√±ar **√Åreas Marinas Protegidas (AMP)** que sean din√°micas y m√°s efectivas, protegiendo los lugares donde los tiburones son m√°s vulnerables.
        - **Monitoreo clim√°tico:** Rastrear c√≥mo cambian estos h√°bitats a lo largo del tiempo nos proporciona datos valiosos sobre c√≥mo el cambio clim√°tico est√° impactando la vida marina y la distribuci√≥n de especies.
        - **Mitigaci√≥n de la pesca incidental:** Nuestra herramienta podr√≠a alertar a las flotas pesqueras sobre zonas de alta probabilidad de actividad de tiburones, ayudando a reducir el n√∫mero de tiburones capturados accidentalmente.
        """
    )
# --- PESTA√ëA 3: NUESTRA METODOLOG√çA (VERSI√ìN CORREGIDA) ---
with tab3:
    st.header("Datos satelitales y machine learning")
    st.write(
        """
        Nuestro primer objetivo fue transformar datos crudos del oc√©ano en una predicci√≥n √∫til y accesible. Para lograrlo, construimos un pipeline de Machine Learning de dos etapas que combina el aprendizaje no supervisado para entender el ambiente, y el aprendizaje supervisado para predecir la presencia de tiburones.
        """
    )
    st.markdown("---")

    # --- CAMBIO CLAVE: Definimos UN SOLO par de columnas para las secciones 1 y 2 ---
    img_col, text_col = st.columns([2, 3]) # Damos un poco m√°s de espacio al texto

    # --- Columna Izquierda: Imagen ---
    with img_col:
        st.image(
            'enesep.png', # Aseg√∫rate de que el nombre del archivo sea correcto
            caption="Visualizaci√≥n de los cl√∫steres oceanogr√°ficos identificados por nuestro modelo, comparaci√≥n enero-septiembre de dos a√±os."
        )

    # --- Columna Derecha: Texto de las secciones 1 y 2 ---
    with text_col:
        st.subheader("1. Procesamiento de datos de la NASA")
        st.markdown(
            """
            Comenzamos con bases de datos de imagenes satelitales de la NASA que capturan variables oce√°nicas clave como la temperatura del mar, la salinidad, la clorofila (indicador de plancton) y las corrientes oce√°nicas.
            """
        )
        
        st.subheader("2. Cl√∫stering para entender el oc√©ano")
        st.markdown(
            """
            Para que nuestro modelo pudiera entender el oc√©ano, primero necesit√°bamos ense√±arle a reconocer diferentes "tipos" de ambientes. Analizamos varios algoritmos de clustering y seleccionamos aquel cuyas agrupaciones mostraron una fuerte correlaci√≥n con las clasificaciones oceanogr√°ficas de la NASA.

            Cada cl√∫ster representa una "etiqueta" para un ecosistema con caracter√≠sticas √∫nicas, permiti√©ndonos crear nuestros propios datasets de entrenamiento.
            """
        )

    st.markdown("---")

    # --- CAMBIO CLAVE: Separamos el texto de la f√≥rmula para un formato perfecto ---
    st.subheader("3. Predicci√≥n de h√°bitats de tiburones")
    
    # Texto ANTES de la f√≥rmula
    st.markdown(
        """
        Con el oc√©ano ya etiquetado por cl√∫steres, entrenamos una **red neuronal**. Esta f√≥rmula representa el **marco te√≥rico** de nuestro enfoque, donde la probabilidad de un tibur√≥n se calcula a partir de la probabilidad de cada tipo de ambiente:
        """
    )

    # La f√≥rmula con st.latex() para que se vea perfecta
    st.latex(r'''
        P(\text{shark}|x) = \sum_{k=1}^{K} P(\text{cluster} = k|x) P(\text{shark}|\text{cluster} = k, \text{time})
    ''')

    # Texto DESPU√âS de la f√≥rmula
    st.markdown(
        """
        Nuestra **red neuronal** es la implementaci√≥n que resuelve esta ecuaci√≥n. El modelo aprendi√≥ la relaci√≥n entre las caracter√≠sticas ambientales de cada cl√∫ster y la probabilidad de encontrar tiburones en esas zonas.

        La predicci√≥n final es una **"predicci√≥n proxy"** inteligente. El modelo utiliza patrones de los cl√∫steres adem√°s de conocimiento biol√≥gico sobre el comportamiento de los tiburones y las caracter√≠sticas del mar para estimar d√≥nde es m√°s probable que se encuentren.
        """
    )